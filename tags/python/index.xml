<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Blowfish</title><link>https://localhost:1313/tags/python/</link><description>Recent content in Python on Blowfish</description><generator>Hugo</generator><language>en</language><managingEditor>nuno@n9o.xyz (Blowfish)</managingEditor><webMaster>nuno@n9o.xyz (Blowfish)</webMaster><lastBuildDate>Thu, 17 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding HTML Templating with Python, Ruby, and PHP</title><link>https://localhost:1313/dsblog/Understanding-HTML-Templating-with-Python-Ruby-PHP/</link><pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/Understanding-HTML-Templating-with-Python-Ruby-PHP/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6164-Understanding-HTML-Templating-with-Python-Ruby-PHP.jpg" alt="Understanding HTML Templating with Python, Ruby, and PHP">&lt;/p>
&lt;h1 id="understanding-html-templating-with-python-ruby-and-php">Understanding HTML Templating with Python, Ruby, and PHP&lt;a class="td-heading-self-link" href="#understanding-html-templating-with-python-ruby-and-php" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="what-is-html-templating">What is HTML Templating?&lt;a class="td-heading-self-link" href="#what-is-html-templating" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This concept is widely used across different frameworks and languages to build dynamic, server-rendered web applications.&lt;/p></description></item><item><title>Exploring Python Package Manager</title><link>https://localhost:1313/dsblog/Exploring-Python-Package-Manager/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/Exploring-Python-Package-Manager/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6161-Exploring-Python-Package-Managers.jpg" alt="Exploring Python Package Managers">&lt;/p>
&lt;h1 id="exploring-python-package-managers">Exploring Python Package Managers&lt;a class="td-heading-self-link" href="#exploring-python-package-managers" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="what-is-package-manager">What is Package Manager?&lt;a class="td-heading-self-link" href="#what-is-package-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;strong>package manager&lt;/strong> is a tool that automates the process of installing, upgrading, configuring, and removing software packages (libraries, frameworks, tools, etc.). It helps manage dependencies between packages and ensures that the correct versions are installed.&lt;/p></description></item><item><title>Python Code Snippnet from Colab</title><link>https://localhost:1313/dsblog/Python-Code-Snippnet-from-Colab/</link><pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/Python-Code-Snippnet-from-Colab/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6149-Python-Code-Snippnet-from-Colab.jpg" alt="Python Code Snippnet from Colab">&lt;/p>
&lt;h1 id="python-code-snippnet-from-colab">Python Code Snippnet from Colab&lt;a class="td-heading-self-link" href="#python-code-snippnet-from-colab" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="what-is-snippet">What is snippet?&lt;a class="td-heading-self-link" href="#what-is-snippet" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;strong>snippet&lt;/strong> is a small, reusable piece of code designed to perform a specific task or solve a particular problem. It’s often just a few lines long and is meant to be quickly inserted into a larger program to save time or avoid re-writing commonly used functions.&lt;/p></description></item><item><title>Decoding pip install operations</title><link>https://localhost:1313/dsblog/Decoding-pip-install-operations/</link><pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/Decoding-pip-install-operations/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6118-Decoding-pip-install-operations.jpg" alt="Decoding-pip-install-operations">&lt;/p>
&lt;h1 id="decoding-pip-install-operations">Decoding pip install operations&lt;a class="td-heading-self-link" href="#decoding-pip-install-operations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Your draft provides useful insights into using &lt;code>pip&lt;/code> for Python package management. Here&amp;rsquo;s a refined version of your article with improved structure, grammar, and clarity:&lt;/p></description></item><item><title>Python APIs for Data</title><link>https://localhost:1313/dsblog/python-apis-for-data/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/python-apis-for-data/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6094-Python-APIs-for-Data.jpg" alt="Python APIs for Data">&lt;/p>
&lt;h1 id="python-apis-for-data">Python APIs for Data&lt;a class="td-heading-self-link" href="#python-apis-for-data" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.bing.com/">Bing&lt;/a> Bing is a search engine that brings together the best of search and people in your social networks to help you spend less time searching and more time doing.&lt;/p></description></item><item><title>AWS SageMaker Jumpstart Models</title><link>https://localhost:1313/dsblog/AWS-SageMaker-Jumpstart-Models/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/AWS-SageMaker-Jumpstart-Models/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6076-AWS-SageMaker-Jumpstart-Models.jpg" alt="AWS SageMaker Jumpstart Models">&lt;/p>
&lt;h1 id="aws-sagemaker-jumpstart-models">AWS SageMaker Jumpstart Models&lt;a class="td-heading-self-link" href="#aws-sagemaker-jumpstart-models" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>As of 17-Jul-23, AWS Sagemaker has 463 models in its Model Zoo. They call these models as Jumstart Models. What are the capabilities of these models, who are the developer of these models, where these models are hosted in given in the table below.&lt;/p></description></item><item><title>Python Decorator Function</title><link>https://localhost:1313/dsblog/Python-Decorator-Function/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/Python-Decorator-Function/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6074-Python-Decorator-Function.jpg" alt="Python Decorator Function">&lt;/p>
&lt;h1 id="python-decorator-function">Python Decorator Function&lt;a class="td-heading-self-link" href="#python-decorator-function" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="what-is-decorator-function-in-python">What is Decorator Function in Python&lt;a class="td-heading-self-link" href="#what-is-decorator-function-in-python" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In Python, a decorator is a special type of function that allows you to modify or extend the behavior of other functions or methods. Decorators provide a convenient way to add functionality to functions without modifying their code directly. They are commonly used for tasks such as logging, authorization, caching, and more.&lt;/p></description></item><item><title>Python Naming Convention</title><link>https://localhost:1313/dsblog/Python-Naming-Convention/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><author>nuno@n9o.xyz (Blowfish)</author><guid>https://localhost:1313/dsblog/Python-Naming-Convention/</guid><description>&lt;p>&lt;img src="https://localhost:1313/assets/images/dspost/dsp6072-Python-Naming-Convention.jpg" alt="Python Naming Convention">&lt;/p>
&lt;h1 id="python-naming-convention">Python Naming Convention&lt;a class="td-heading-self-link" href="#python-naming-convention" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>UPPERCASE / UPPER_CASE_WITH_UNDERSCORES =&amp;gt; module-level constants&lt;/li>
&lt;li>lowercase / lower_case_with_underscores =&amp;gt; for variable and function name.&lt;/li>
&lt;li>CapitalizedWords (or CapWords, or CamelCase – so named because of the bumpy look of its letters [4]). This is also sometimes known as StudlyCaps. =&amp;gt; CamelCase =&amp;gt; Class
&lt;ul>
&lt;li>Note: When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>mixedCase (differs from CapitalizedWords by initial lowercase character!)&lt;/li>
&lt;li>Capitalized_Words_With_Underscores (ugly!)&lt;/li>
&lt;li>_single_leading_underscore: weak “internal use” indicator. E.g. from M import * does not import objects whose names start with an underscore.&lt;/li>
&lt;li>single_trailing_underscore_: used by convention to avoid conflicts with Python keyword, e.g.
tkinter.Toplevel(master, class_=&amp;lsquo;ClassName&amp;rsquo;)&lt;/li>
&lt;li>__double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, __boo becomes _FooBar__boo; see below).&lt;/li>
&lt;li>_&lt;em>double_leading_and_trailing_underscore&lt;/em>_: “magic” objects or attributes that live in user-controlled namespaces. E.g. _&lt;em>init&lt;/em>_, _&lt;em>import&lt;/em>_ or _&lt;em>file&lt;/em>_. Never invent such names; only use them as documented.&lt;/li>
&lt;li>Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names.&lt;/li>
&lt;/ul>
&lt;h1 id="programming-recommendations">Programming Recommendations&lt;a class="td-heading-self-link" href="#programming-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="use-is-not-operator">Use &amp;ldquo;is not&amp;rdquo; operator&lt;a class="td-heading-self-link" href="#use-is-not-operator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Correct:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Wrong:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="always-use-a-def-statement">Always use a def statement&lt;a class="td-heading-self-link" href="#always-use-a-def-statement" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Correct:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Wrong:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="all-tryexcept-clauses">all try/except clauses&lt;a class="td-heading-self-link" href="#all-tryexcept-clauses" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Correct:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collection&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span> &lt;span class="ne">KeyError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">key_not_found&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">handle_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Wrong:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Too broad!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">handle_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">collection&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span> &lt;span class="ne">KeyError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Will also catch KeyError raised by handle_value()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">key_not_found&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="context-managers-should-be-invoked-through-separate-functions-or-methods">Context managers should be invoked through separate functions or methods&lt;a class="td-heading-self-link" href="#context-managers-should-be-invoked-through-separate-functions-or-methods" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Correct:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">begin_transaction&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_stuff_in_transaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Wrong:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_stuff_in_transaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="be-consistent-in-return-statements">Be consistent in return statements&lt;a class="td-heading-self-link" href="#be-consistent-in-return-statements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Correct:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Wrong:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="startswith-endswith">startswith, endswith&lt;a class="td-heading-self-link" href="#startswith-endswith" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Use &amp;lsquo;&amp;rsquo;.startswith() and &amp;lsquo;&amp;rsquo;.endswith() instead of string slicing to check for prefixes or suffixes.&lt;/li>
&lt;li>Correct:
if foo.startswith(&amp;lsquo;bar&amp;rsquo;):&lt;/li>
&lt;li>Wrong:
if foo[:3] == &amp;lsquo;bar&amp;rsquo;:&lt;/li>
&lt;/ul>
&lt;h2 id="object-type-comparisons">Object type comparisons&lt;a class="td-heading-self-link" href="#object-type-comparisons" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Correct:
if isinstance(obj, int):&lt;/li>
&lt;li>Wrong:
if type(obj) is type(1):&lt;/li>
&lt;/ul>
&lt;h2 id="sequences-strings-lists-tuples">Sequences, (strings, lists, tuples)&lt;a class="td-heading-self-link" href="#sequences-strings-lists-tuples" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>-For sequences, (strings, lists, tuples), use the fact that empty sequences are false:&lt;/p></description></item></channel></rss>